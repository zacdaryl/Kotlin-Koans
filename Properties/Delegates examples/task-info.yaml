type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 75
    length: 20
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 75
    initialized_from_dependency: false
    possible_answer: lazy(initializer)
    selected: true
    status: Solved
  text: |+
    class LazyProperty(val initializer: () -> Int) {
        val lazyValue: Int by TODO()
    }

  learner_created: false
- name: test/tests.kt
  visible: false
  text: |-
    import org.junit.Assert
    import org.junit.Test
    import java.util.HashMap

    class TestDelegatesExamples {
        @Test fun testLazy() {
            var initialized = false
            val lazyProperty = LazyProperty({ initialized = true; 42 })
            Assert.assertFalse("Property shouldn't be initialized before access", initialized)
            val result: Int = lazyProperty.lazyValue
            Assert.assertTrue("Property should be initialized after access", initialized)
            Assert.assertEquals(42, result)
        }

        @Test fun initializedOnce() {
            var initialized = 0
            val lazyProperty = LazyProperty( { initialized++; 42 })
            lazyProperty.lazyValue
            lazyProperty.lazyValue
            Assert.assertEquals("Lazy property should be initialized once", 1, initialized)
        }
    }
  learner_created: false
status: Solved
record: -1
