type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 20
    length: 310
    placeholder_text: fun partitionTo() = TODO()
    initial_state:
      length: 26
      offset: 20
    initialized_from_dependency: false
    possible_answer: |-
      fun <T, C: MutableCollection<T>> Collection<T>.partitionTo(first: C, second: C, predicate: (T) -> Boolean): Pair<C, C> {
          for (element in this) {
              if (predicate(element)) {
                  first.add(element)
              } else {
                  second.add(element)
              }
          }
          return Pair(first, second)
      }
    selected: true
    status: Solved
  text: |
    import java.util.*

    fun partitionTo() = TODO()

    fun partitionWordsAndLines() {
        val (words, lines) = listOf("a", "a b", "c", "d e").
                partitionTo(ArrayList<String>(), ArrayList()) { s -> !s.contains(" ") }
        words == listOf("a", "c")
        lines == listOf("a b", "d e")
    }

    fun partitionLettersAndOtherSymbols() {
        val (letters, other) = setOf('a', '%', 'r', '}').
                partitionTo(HashSet<Char>(), HashSet()) { c -> c in 'a'..'z' || c in 'A'..'Z'}
        letters == setOf('a', 'r')
        other == setOf('%', '}')
    }
  learner_created: false
- name: test/tests.kt
  visible: false
  text: |-
    import org.junit.Assert
    import org.junit.Test
    import java.util.*
    import koans.util.toMessageInEquals

    class TestGenericFunctions {
        @Test fun testPartitionWordsAndLines() {
            partitionWordsAndLines()

            val (words, lines) = listOf("a", "a b", "c", "d e").
                    partitionTo(ArrayList<String>(), ArrayList()) { s -> !s.contains(" ") }
            Assert.assertEquals("partitionTo".toMessageInEquals(), listOf("a", "c"), words)
            Assert.assertEquals("partitionTo".toMessageInEquals(), listOf("a b", "d e"), lines)
        }

        @Test fun testPartitionLettersAndOtherSymbols() {
            partitionLettersAndOtherSymbols()

            val (letters, other) = setOf('a', '%', 'r', '}').
                    partitionTo(HashSet<Char>(), HashSet()) { c -> c in 'a'..'z' || c in 'A'..'Z'}
            Assert.assertEquals("partitionTo".toMessageInEquals(), setOf('a', 'r'), letters)
            Assert.assertEquals("partitionTo".toMessageInEquals(), setOf('%', '}'), other)
        }
    }
  learner_created: false
status: Solved
record: -1
