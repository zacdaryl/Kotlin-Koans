type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 139
    length: 356
    placeholder_text: 'operator fun MyDate.plus(timeInterval: TimeInterval): MyDate
      = TODO()'
    initial_state:
      length: 69
      offset: 139
    initialized_from_dependency: false
    possible_answer: |2

      operator fun MyDate.plus(timeInterval: TimeInterval) = addTimeIntervals(timeInterval, 1)

      class RepeatedTimeInterval(val timeInterval: TimeInterval, val number: Int)
      operator fun TimeInterval.times(number: Int) = RepeatedTimeInterval(this, number)

      operator fun MyDate.plus(timeIntervals: RepeatedTimeInterval) = addTimeIntervals(timeIntervals.timeInterval, timeIntervals.number)
    selected: true
    status: Solved
  - offset: 600
    length: 48
    placeholder_text: TODO("Uncomment") //return today + YEAR * 2 + WEEK * 3 + DAY
      * 5
    initial_state:
      length: 64
      offset: 318
    initialized_from_dependency: false
    possible_answer: return today + YEAR * 2 + WEEK * 3 + DAY * 5
    selected: true
    status: Solved
  text: |
    import TimeInterval.*

    data class MyDate(val year: Int, val month: Int, val dayOfMonth: Int)

    enum class TimeInterval { DAY, WEEK, YEAR }

    operator fun MyDate.plus(timeInterval: TimeInterval): MyDate = TODO()

    fun task1(today: MyDate): MyDate {
        return today + YEAR + WEEK
    }

    fun task2(today: MyDate): MyDate {
        TODO("Uncomment") //return today + YEAR * 2 + WEEK * 3 + DAY * 5
    }
  learner_created: false
- name: src/DateUtil.kt
  visible: true
  text: |-
    import java.util.Calendar

    fun MyDate.addTimeIntervals(timeInterval: TimeInterval, number: Int): MyDate {
        val c = Calendar.getInstance()
        c.set(year + if (timeInterval == TimeInterval.YEAR) number else 0, month, dayOfMonth)
        var timeInMillis = c.getTimeInMillis()
        val millisecondsInADay = 24 * 60 * 60 * 1000L
        timeInMillis += number * when (timeInterval) {
            TimeInterval.DAY -> millisecondsInADay
            TimeInterval.WEEK -> 7 * millisecondsInADay
            TimeInterval.YEAR -> 0L
        }
        val result = Calendar.getInstance()
        result.setTimeInMillis(timeInMillis)
        return MyDate(result.get(Calendar.YEAR), result.get(Calendar.MONTH), result.get(Calendar.DATE))
    }
  learner_created: false
- name: test/tests.kt
  visible: false
  text: |
    import org.junit.Assert
    import org.junit.Test
    import koans.util.toMessageInEquals

    class TestOperatorsOverloading {
        @Test fun testAddOneTimeInterval() {
            Assert.assertEquals("task1".toMessageInEquals(), MyDate(2015, 5, 8), task1(MyDate(2014, 5, 1)))
        }

        @Test fun testOneMonth() {
            Assert.assertEquals("task2".toMessageInEquals(), MyDate(2016, 0, 27), task2(MyDate(2014, 0, 1)))
        }

        @Test fun testMonthChange() {
            Assert.assertEquals("task2".toMessageInEquals(), MyDate(2016, 1, 20), task2(MyDate(2014, 0, 25)))
        }
    }
  learner_created: false
status: Solved
record: -1
