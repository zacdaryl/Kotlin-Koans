type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 45
    length: 22
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 45
    initialized_from_dependency: false
    possible_answer: DateRange(this, other)
    selected: true
    status: Solved
  text: |
    operator fun MyDate.rangeTo(other: MyDate) = TODO()

    class DateRange(override val start: MyDate, override val endInclusive: MyDate): ClosedRange<MyDate>

    fun checkInRange(date: MyDate, first: MyDate, last: MyDate): Boolean {
        return date in first..last
    }
  learner_created: false
- name: src/MyDate.kt
  visible: true
  text: |-
    data class MyDate(val year: Int, val month: Int, val dayOfMonth: Int) : Comparable<MyDate>{
        override fun compareTo(other: MyDate): Int{
            if(year != other.year) return year - other.year
            if(month != other.month) return month - other.month
            return dayOfMonth - other.dayOfMonth
        }
    }
  learner_created: false
- name: test/tests.kt
  visible: false
  text: |-
    import org.junit.Assert
    import org.junit.Test
    import java.util.ArrayList
    import koans.util.inEquals

    class TestRangeTo {
        fun doTest(date: MyDate, first: MyDate, last: MyDate, shouldBeInRange: Boolean) {
            val message = "${date} should${if (shouldBeInRange) "" else "n't"} be in range: ${first}..${last}".inEquals()
            Assert.assertEquals(message, shouldBeInRange, checkInRange(date, first, last))
        }

        @Test fun testInRange() {
            doTest(MyDate(2014, 3, 22), MyDate(2014, 1, 1), MyDate(2015, 1, 1), shouldBeInRange = true)
        }
    }
  learner_created: false
status: Solved
record: -1
