type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 0
    length: 441
    placeholder_text: 'class DateRange(val start: MyDate, val end: MyDate)'
    initial_state:
      length: 51
      offset: 0
    initialized_from_dependency: false
    possible_answer: |-
      class DateRange(val start: MyDate, val end: MyDate): Iterable<MyDate>{
          override fun iterator(): Iterator<MyDate> = DateIterator(this)
      }

      class DateIterator(val dateRange:DateRange) : Iterator<MyDate> {
          var current: MyDate = dateRange.start
          override fun next(): MyDate {
              val result = current
              current = current.nextDay()
              return result
          }
          override fun hasNext(): Boolean = current <= dateRange.end
      }
    selected: true
    status: Solved
  text: |
    class DateRange(val start: MyDate, val end: MyDate)

    fun iterateOverDateRange(firstDate: MyDate, secondDate: MyDate, handler: (MyDate) -> Unit) {
        for (date in firstDate..secondDate) {
            handler(date)
        }
    }
  learner_created: false
- name: src/DateUtil.kt
  visible: true
  text: |-
    import java.util.Calendar

    fun MyDate.nextDay() = addTimeIntervals(TimeInterval.DAY, 1)

    enum class TimeInterval {
        DAY,
        WEEK,
        YEAR
    }

    fun MyDate.addTimeIntervals(timeInterval: TimeInterval, number: Int): MyDate {
        val c = Calendar.getInstance()
        c.set(year + if (timeInterval == TimeInterval.YEAR) number else 0, month, dayOfMonth)
        var timeInMillis = c.getTimeInMillis()
        val millisecondsInADay = 24 * 60 * 60 * 1000L
        timeInMillis += number * when (timeInterval) {
            TimeInterval.DAY -> millisecondsInADay
            TimeInterval.WEEK -> 7 * millisecondsInADay
            TimeInterval.YEAR -> 0L
        }
        val result = Calendar.getInstance()
        result.setTimeInMillis(timeInMillis)
        return MyDate(result.get(Calendar.YEAR), result.get(Calendar.MONTH), result.get(Calendar.DATE))
    }
  learner_created: false
- name: src/MyDate.kt
  visible: true
  text: |
    data class MyDate(val year: Int, val month: Int, val dayOfMonth: Int) : Comparable<MyDate>{
        override fun compareTo(other: MyDate): Int{
            if(year != other.year) return year - other.year
            if(month != other.month) return month - other.month
            return dayOfMonth - other.dayOfMonth
        }
    }

    operator fun MyDate.rangeTo(other: MyDate) = DateRange(this, other)
  learner_created: false
- name: test/tests.kt
  visible: false
  text: |-
    import org.junit.Assert
    import org.junit.Test
    import koans.util.inEquals

    class TestForLoop {
        @Test fun testIterateOverDateRange() {
            val actualDateRange = arrayListOf<MyDate>()
            iterateOverDateRange(MyDate(2016, 5, 1), MyDate(2016, 5, 5), {
                date-> actualDateRange.add(date)
            })
            val expectedDateRange = arrayListOf(
                    MyDate(2016, 5, 1), MyDate(2016, 5, 2), MyDate(2016, 5, 3), MyDate(2016, 5, 4), MyDate(2016, 5, 5))
            Assert.assertEquals("Incorrect iteration over five nice spring dates".inEquals(),
                    expectedDateRange, actualDateRange)
        }

        @Test fun testIterateOverEmptyRange() {
            var invoked = false
            iterateOverDateRange(MyDate(2016, 1, 1), MyDate(2015, 1, 1), { invoked = true })
            Assert.assertFalse("Handler was invoked on an empty range".inEquals(), invoked)
        }
    }
  learner_created: false
status: Solved
record: -1
