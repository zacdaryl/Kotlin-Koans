type: edu
files:
- name: src/Task.kt
  visible: true
  placeholders:
  - offset: 64
    length: 0
    placeholder_text: TODO()
    initial_state:
      length: 6
      offset: 40
    initialized_from_dependency: false
    possible_answer: f(); return this
    selected: false
    status: Solved
  text: |
    fun <T> T.myApply(f: T.() -> Unit): T { TODO() }

    fun createString(): String {
        return StringBuilder().myApply {
            append("Numbers: ")
            for (i in 1..10) {
                append(i)
            }
        }.toString()
    }

    fun createMap(): Map<Int, String> {
        return hashMapOf<Int, String>().myApply {
            put(0, "0")
            for (i in 1..10) {
                put(i, "$i")
            }
        }
    }
  learner_created: false
- name: test/tests.kt
  visible: false
  text: |
    import org.junit.Assert
    import org.junit.Test
    import java.util.HashMap
    import koans.util.inEquals

    class TestTheFunctionWith {
        @Test fun testCreateString() {
            val s = createString()
            val sb = StringBuilder()
            sb.append("Numbers: ")
            for (i in 1..10) {
                sb.append(i)
            }
            Assert.assertEquals("String should be built".inEquals(), sb.toString(), s)
        }

        @Test fun testCreateMap() {
            val map = createMap()
            val expected = HashMap<Int, String>()
            for (i in 0..10) {
                expected[i] = "$i"
            }
            Assert.assertEquals("Map should be filled with the right values".inEquals(), expected, map)
        }
    }
  learner_created: false
status: Solved
record: -1
